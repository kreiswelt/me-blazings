@page "/showtasks"
@using Microsoft.Graph.Models.ODataErrors;
@using Microsoft.Identity.Client;
@using Microsoft.Identity.Web
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ILogger<ShowTasks> Logger

<PageTitle>Tasks</PageTitle>

<h1>Todo</h1>

@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todoList)
            {
                <tr>
                    <td>@todo.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Todo> todoList = new List<Todo>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var todoArray = await GraphServiceClient.Me
                .Todo
                .Lists
                .GetAsync();

            if (todoArray?.Value?.Count > 0) {
                todoArray?.Value?.ForEach(todo => {
                    todoList.Add(new Todo{
                      Name = todo.DisplayName ?? "NO DISPLAY NAME",
                  });
                });
            }
        }
        catch (Exception ex)
        {
            var oDataError = (ex as ODataError);
            if (oDataError?.Error != null && "ErrorAccessDenied".Equals(oDataError.Error.Code, StringComparison.OrdinalIgnoreCase))
            {
                Logger.LogError($"Error: {oDataError.Error.Message}");

                var challenger = new MicrosoftIdentityWebChallengeUserException(
                    new MsalUiRequiredException(MsalError.InvalidGrantError, oDataError.Error.Message),
                    new[] { "Tasks.Read" });

                ConsentHandler.HandleException(challenger);
            }
        }
    }

    public class Todo {
        public string Name = string.Empty;
    }
}
